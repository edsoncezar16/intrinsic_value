name: Serverless Branch Deployments
on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

concurrency:
  # Cancel in-progress deploys to same branch
  group: ${{ github.ref }}/branch_deployments
  cancel-in-progress: true
env:
  DAGSTER_CLOUD_URL: "http://datavillas.dagster.plus"
  ORGANIZATION_ID: datavillas
  DAGSTER_CLOUD_API_TOKEN: ${{ secrets.DAGSTER_CLOUD_API_TOKEN }}
  ENABLE_FAST_DEPLOYS: 'true'
  PYTHON_VERSION: '3.12'
  DAGSTER_CLOUD_FILE: 'dagster_cloud.yaml'
  GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
  DBT_TARGET_PATH: transformation/target
  DBT_MANIFEST_S3_BUCKET: intrinsic-value-dbt-manifests

jobs:
  dagster_cloud_default_deploy:
    name: Dagster Serverless Deploy
    runs-on: ubuntu-22.04
    outputs:
      build_info: ${{ steps.parse-workspace.outputs.build_info }}

    steps:
      - name: Prerun Checks
        id: prerun
        uses: dagster-io/dagster-cloud-action/actions/utils/prerun@v0.1

      - name: Launch Docker Deploy
        if: steps.prerun.outputs.result == 'docker-deploy'
        id: parse-workspace
        uses: dagster-io/dagster-cloud-action/actions/utils/parse_workspace@v0.1
        with:
          dagster_cloud_file: $DAGSTER_CLOUD_FILE

      - name: Checkout for Python Executable Deploy
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          path: '.'

      - name: Set up Python and cache dependencies
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
        
      - name: Install Python dependencies
        run: |
          python -m pip install pip --upgrade
          pip install -r requirements.txt

      - name: Check for dbt changes
        id: dbt-changes
        run: |
          if git diff-tree --no-commit-id --name-only -r "$COMMIT_SHA" | grep -q "^transformation"; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "dbt project has been modified, so this job will recompile it."
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No dbt project changes: manifest will be downloaded from remote storage."
          fi
        shell: bash
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        
      - name: Download manifest
        if: steps.dbt-changes.outputs.changed == 'false'
        run: |
          mkdir -p "${{ env.DBT_TARGET_PATH }}"
          aws s3 cp "s3://${{ env.DBT_MANIFEST_S3_BUCKET }}/${{ github.head_ref }}/manifest.json" "${{ env.DBT_TARGET_PATH }}/manifest.json"

      
      - name: Prepare dbt project for deployment
        id: prepare-dbt
        run: |
          if [[ ! -f "./transformation/target/manifest.json" ]]; then
            echo "Compiling dbt because manifest is missing or code changed"
            cd transformation
            dbt deps
            dbt compile
            cd ..
            echo "compiled=true" >> "$GITHUB_OUTPUT"
          else
            echo "Using cached manifest"
            echo "compiled=false" >> "$GITHUB_OUTPUT"
          fi
          dagster-dbt project prepare-and-package --file orchestration/defs/transformation.py

      - name: Upload manifest artifact
        if: steps.prepare-dbt.outputs.compiled == 'true'
        run: |
          aws s3 cp "${{ env.DBT_TARGET_PATH }}/manifest.json" s3://${{ env.DBT_MANIFEST_S3_BUCKET }}/${{ github.head_ref }}/manifest.json"

      - name: Python Executable Deploy
        if: steps.prerun.outputs.result == 'pex-deploy'
        uses: dagster-io/dagster-cloud-action/actions/build_deploy_python_executable@v0.1
        with:
          dagster_cloud_file: "$GITHUB_WORKSPACE/$DAGSTER_CLOUD_FILE"
          build_output_dir: "$GITHUB_WORKSPACE/build"
          python_version: "${{ env.PYTHON_VERSION }}"
      
      - name: Get branch deployment
        id: branch-deployment
        if: github.event.action != 'synchronize'
        uses: dagster-io/dagster-cloud-action/actions/utils/get_branch_deployment@v0.1
        with:
          dagster_cloud_url: ${{ env.DAGSTER_CLOUD_URL }}
       
      
      - name: Clone Motherduck database upon launch
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        uses: dagster-io/dagster-cloud-action/actions/utils/run@v0.1
        with:
          location_name: intrinsic-value
          deployment: ${{ steps.branch-deployment.outputs.deployment }}
          job_name: clone_prod
          
      - name: Delete Motherduck db clone upon PR close
        if: github.event.action == 'closed'
        uses: dagster-io/dagster-cloud-action/actions/utils/run@v0.1
        with:
          location_name: intrinsic-value
          deployment: ${{ steps.branch-deployment.outputs.deployment }}
          job_name: drop_prod_clone

  dagster_cloud_docker_deploy:
    name: Docker Deploy
    runs-on: ubuntu-20.04
    if: needs.dagster_cloud_default_deploy.outputs.build_info
    needs: dagster_cloud_default_deploy
    strategy:
      fail-fast: false
      matrix:
        location: ${{ fromJSON(needs.dagster_cloud_default_deploy.outputs.build_info) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Build and deploy to Dagster Cloud serverless
        uses: dagster-io/dagster-cloud-action/actions/serverless_branch_deploy@v0.1
        with:
          dagster_cloud_api_token: ${{ env.DAGSTER_CLOUD_API_TOKEN }}
          location: ${{ toJson(matrix.location) }}
          base_image: "python:${{ env.PYTHON_VERSION }}-slim"
          organization_id: ${{ env.ORGANIZATION_ID }}
